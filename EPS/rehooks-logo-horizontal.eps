%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 251 100
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 251 100
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 251 100 rc
0 100 m
251 100 l
251 0 l
0 0 l
h
f
Q
0 0 0 sc
q
108.764 47.976002 m
103.936 47.976002 l
103.936 39 l
100.332 39 l
100.332 61.439999 l
109.478 61.439999 l
111.90334 61.439999 113.81866 60.845005 115.224 59.654999 c
116.62934 58.464993 117.332 56.81601 117.332 54.708 c
117.332 53.09866 116.91833 51.755672 116.091 50.679001 c
115.26366 49.602329 114.09068 48.837337 112.572 48.383999 c
118.658 39 l
114.476 39 l
108.764 47.976002 l
h
103.936 51.001999 m
109.172 51.001999 l
110.64534 51.001999 111.74466 51.30233 112.47 51.903 c
113.19534 52.50367 113.558 53.427326 113.558 54.674 c
113.558 55.920673 113.19534 56.84433 112.47 57.445 c
111.74466 58.04567 110.64534 58.346001 109.172 58.346001 c
103.936 58.346001 l
103.936 51.001999 l
h
136.192 48.009998 m
136.192 47.352665 136.14667 46.729336 136.056 46.139999 c
123.612 46.139999 l
123.816 44.643993 124.34866 43.505005 125.21 42.723 c
126.07133 41.940994 127.18199 41.549999 128.54201 41.549999 c
129.65268 41.549999 130.57632 41.748333 131.313 42.145 c
132.04967 42.541668 132.554 43.113995 132.826 43.862 c
135.85201 42.604 l
134.58266 39.974655 132.14601 38.66 128.54201 38.66 c
125.86732 38.66 123.77634 39.441994 122.269 41.006001 c
120.76166 42.570007 120.008 44.734653 120.008 47.5 c
120.008 50.288013 120.73333 52.458324 122.184 54.011002 c
123.63467 55.563675 125.67465 56.34 128.304 56.34 c
130.79735 56.34 132.73532 55.580673 134.118 54.062 c
135.50067 52.543327 136.192 50.526012 136.192 48.009998 c
h
128.304 53.450001 m
126.98933 53.450001 125.92967 53.064671 125.125 52.293999 c
124.32033 51.523331 123.816 50.40134 123.612 48.928001 c
132.79201 48.928001 l
132.61067 50.356007 132.129 51.466663 131.347 52.259998 c
130.565 53.053337 129.55067 53.450001 128.304 53.450001 c
h
148.694 56.34 m
150.57535 56.34 152.11099 55.796005 153.30099 54.708 c
154.49101 53.619995 155.086 52.056011 155.086 50.015999 c
155.086 39 l
151.448 39 l
151.448 48.860001 l
151.448 51.852016 150.23535 53.348 147.81 53.348 c
146.54066 53.348 145.45267 52.906006 144.54601 52.021999 c
143.63933 51.137997 143.186 49.789341 143.186 47.976002 c
143.186 39 l
139.548 39 l
139.548 63.650002 l
143.186 63.650002 l
143.186 53.279999 l
143.75267 54.32267 144.50633 55.09333 145.44701 55.591999 c
146.38766 56.090668 147.47 56.34 148.694 56.34 c
h
166.87399 56.34 m
169.52602 56.34 171.59999 55.558006 173.09599 53.993999 c
174.59201 52.429993 175.34 50.265347 175.34 47.5 c
175.34 44.734653 174.59201 42.570007 173.09599 41.006001 c
171.59999 39.441994 169.52602 38.66 166.87399 38.66 c
164.22198 38.66 162.14801 39.441994 160.65199 41.006001 c
159.15599 42.570007 158.408 44.734653 158.408 47.5 c
158.408 50.265347 159.15599 52.429993 160.65199 53.993999 c
162.14801 55.558006 164.22198 56.34 166.87399 56.34 c
h
166.87399 53.484001 m
165.33266 53.484001 164.14833 52.968338 163.321 51.937 c
162.49367 50.905663 162.08 49.426678 162.08 47.5 c
162.08 45.573322 162.49367 44.094337 163.321 43.063 c
164.14833 42.031662 165.33266 41.515999 166.87399 41.515999 c
168.41534 41.515999 169.60533 42.037327 170.444 43.080002 c
171.28267 44.122673 171.702 45.595989 171.702 47.5 c
171.702 49.404011 171.28267 50.877327 170.444 51.919998 c
169.60533 52.962673 168.41534 53.484001 166.87399 53.484001 c
h
186.278 56.34 m
188.93001 56.34 191.004 55.558006 192.5 53.993999 c
193.996 52.429993 194.744 50.265347 194.744 47.5 c
194.744 44.734653 193.996 42.570007 192.5 41.006001 c
191.004 39.441994 188.93001 38.66 186.278 38.66 c
183.62599 38.66 181.552 39.441994 180.056 41.006001 c
178.56 42.570007 177.812 44.734653 177.812 47.5 c
177.812 50.265347 178.56 52.429993 180.056 53.993999 c
181.552 55.558006 183.62599 56.34 186.278 56.34 c
h
186.278 53.484001 m
184.73666 53.484001 183.55234 52.968338 182.72501 51.937 c
181.89766 50.905663 181.48399 49.426678 181.48399 47.5 c
181.48399 45.573322 181.89766 44.094337 182.72501 43.063 c
183.55234 42.031662 184.73666 41.515999 186.278 41.515999 c
187.81934 41.515999 189.00932 42.037327 189.84801 43.080002 c
190.68668 44.122673 191.106 45.595989 191.106 47.5 c
191.106 49.404011 190.68668 50.877327 189.84801 51.919998 c
189.00932 52.962673 187.81934 53.484001 186.278 53.484001 c
h
205.20599 46.990002 m
201.84 43.521999 l
201.84 39 l
198.202 39 l
198.202 63.650002 l
201.84 63.650002 l
201.84 47.669998 l
209.966 56 l
214.25 56 l
207.756 49.335999 l
214.658 39 l
210.442 39 l
205.20599 46.990002 l
h
222.978 38.66 m
221.25533 38.66 219.731 38.954662 218.405 39.543999 c
217.07899 40.133335 216.076 41.02866 215.396 42.23 c
217.84399 44.338001 l
218.27467 43.363327 218.94333 42.649334 219.85001 42.195999 c
220.75667 41.742664 221.84467 41.515999 223.114 41.515999 c
224.27 41.515999 225.16533 41.702999 225.8 42.077 c
226.43468 42.451 226.752 42.943996 226.752 43.556 c
226.752 44.100002 226.45734 44.536331 225.868 44.865002 c
225.27866 45.193668 224.25867 45.505333 222.808 45.799999 c
220.29199 46.276001 218.524 46.910664 217.504 47.703999 c
216.48399 48.497337 215.974 49.619328 215.974 51.07 c
215.974 51.999336 216.25732 52.866329 216.82401 53.671001 c
217.39067 54.47567 218.21233 55.121666 219.289 55.609001 c
220.36568 56.096336 221.64066 56.34 223.114 56.34 c
224.99535 56.34 226.50266 56.028336 227.636 55.404999 c
228.76933 54.781662 229.642 53.812672 230.254 52.498001 c
227.67 50.594002 l
227.26199 51.591339 226.68967 52.32233 225.953 52.786999 c
225.21632 53.251671 224.28134 53.484001 223.14799 53.484001 c
222.12799 53.484001 221.28368 53.274334 220.61501 52.855 c
219.94633 52.435665 219.612 51.954002 219.612 51.41 c
219.612 50.797997 219.91232 50.310669 220.513 49.948002 c
221.11366 49.585331 222.20732 49.256668 223.79401 48.962002 c
226.19669 48.53133 227.89667 47.919338 228.894 47.125999 c
229.89134 46.332664 230.39 45.222008 230.39 43.793999 c
230.39 42.275326 229.73267 41.040005 228.418 40.088001 c
227.10333 39.135994 225.29001 38.66 222.978 38.66 c
h
W*
0 0 251 100 rc
95.332001 68.650002 m
235.39 68.650002 l
235.39 33.66 l
95.332001 33.66 l
h
f
Q
q
64.659325 39.134113 m
62.541763 38.696266 60.274754 38.351509 57.89003 38.109928 c
49.824009 26.450363 40.275627 19.65724 34.660492 22.899139 c
30.69009 25.191452 30.052492 31.653036 32.219826 39.874695 c
24.050734 42.100368 18.681786 45.89072 18.681786 50.492779 c
18.681786 53.409863 20.790586 55.989563 24.479841 58.069496 c
29.794556 61.432632 l
26.537714 51.210007 l
24.486822 54.548065 l
22.616156 53.212811 21.666861 51.809566 21.666861 50.492779 c
21.666861 47.51152 26.139807 44.612305 33.070107 42.753017 c
33.734993 44.792999 34.554611 46.91671 35.521896 49.091904 c
29.320133 62.036022 28.143795 73.874237 33.806973 77.143875 c
37.813183 79.456863 43.798908 76.708855 49.891914 70.606972 c
55.945221 76.65287 61.966198 79.460503 65.978706 77.143875 c
68.504974 75.685333 69.684662 72.569214 69.641312 68.334259 c
69.896515 62.050011 l
62.671879 69.981834 l
66.588165 70.088928 l
66.367134 72.376595 65.626541 73.900337 64.486168 74.558731 c
61.882114 76.06218 57.075218 73.583282 51.950661 68.421616 c
53.401024 66.794685 54.845531 64.988632 56.258926 63.026474 c
70.524231 61.911427 81.318214 57.018051 81.318214 50.492779 c
81.318214 45.860516 75.930885 42.046658 67.580612 39.822189 c
69.703316 31.686255 69.092781 25.189829 65.125191 22.899139 c
62.598923 21.440598 59.310432 21.977022 55.664532 24.132044 c
50.094612 27.053154 l
60.576088 29.34396 l
58.71069 25.898808 l
60.802387 24.94639 62.492279 24.825895 63.632652 25.484289 c
66.202621 26.968061 66.486244 32.249313 64.659325 39.134113 c
h
52.377434 63.232758 m
51.55246 64.294495 50.723114 65.293732 49.896828 66.226517 c
49.067455 65.288895 48.236355 64.286812 47.411282 63.225616 c
48.267815 63.252964 49.13129 63.266777 50 63.266777 c
50.79966 63.266777 51.592503 63.255333 52.377434 63.232758 c
h
47.832954 68.426575 m
42.64307 73.634201 37.828339 76.018745 35.299511 74.558731 c
32.812809 73.123032 32.466694 68.131935 34.101917 61.572971 c
37.010036 62.247059 40.180302 62.72998 43.503643 63.003548 c
44.91666 64.971191 46.369164 66.787834 47.832954 68.426575 c
h
34.915573 58.697155 m
36.238724 54.496475 38.274727 49.827656 40.988625 45.127045 c
41.81477 43.696121 42.675365 42.309269 43.561836 40.976715 c
45.62886 40.799072 47.783882 40.703857 50 40.703857 c
50.824306 40.703857 51.492538 40.035625 51.492538 39.211319 c
51.492538 38.387012 50.824306 37.718781 50 37.718781 c
48.56953 37.718781 47.160881 37.755409 45.780281 37.826839 c
47.118504 36.033257 48.496376 34.371372 49.887749 32.872356 c
52.926338 36.151161 56.024242 40.324387 58.797058 45.127045 c
59.566666 46.460045 60.2882 47.799816 60.957973 49.136215 c
60.070545 51.03685 59.064911 52.973698 57.943539 54.91597 c
57.531384 55.629841 57.775974 56.54266 58.489845 56.954815 c
59.203712 57.366966 60.116535 57.122375 60.528687 56.408508 c
61.260403 55.141136 61.947502 53.874382 62.588337 52.614986 c
63.496555 54.697979 64.268448 56.750698 64.889603 58.73354 c
60.568478 59.70153 55.470364 60.281704 50 60.281704 c
48.355217 60.281704 46.731186 60.230301 45.140873 60.12978 c
44.008141 58.493553 42.901421 56.75069 41.842144 54.91597 c
41.429993 54.202099 40.51717 53.957512 39.803299 54.369663 c
39.089432 54.781815 38.844841 55.694637 39.256992 56.408508 c
39.926563 57.568233 40.614368 58.695351 41.316559 59.786179 c
39.07349 59.522762 36.926113 59.157333 34.915573 58.697155 c
h
47.792034 30.742582 m
45.766872 32.913673 43.776085 35.403091 41.888691 38.127014 c
39.515625 38.372303 37.252327 38.724247 35.134865 39.172279 c
33.289669 32.1894 33.651871 26.928335 36.15303 25.484289 c
38.604614 24.068867 43.008629 26.183098 47.792027 30.742575 c
h
39.7342 41.412033 m
39.282001 42.140514 38.838058 42.881783 38.403473 43.63451 c
38.02137 44.296333 37.651432 44.957993 37.293896 45.618523 c
36.806656 44.403259 36.373428 43.215034 35.993946 42.061771 c
37.188675 41.814701 38.438084 41.596855 39.7342 41.412033 c
h
63.801487 42.013752 m
63.416943 43.18232 62.978611 44.384556 62.487225 45.611389 c
62.130295 44.951336 61.761822 44.292015 61.38221 43.63451 c
60.938229 42.865513 60.486233 42.110859 60.02734 41.371613 c
61.338116 41.553143 62.598442 41.768608 63.801487 42.013752 c
h
66.737701 42.69976 m
73.853096 44.590275 78.333138 47.570259 78.333138 50.492779 c
78.333138 53.349438 74.226273 56.130768 67.785812 57.994038 c
66.895973 55.124554 65.709373 52.126152 64.265068 49.103069 c
65.241371 46.913586 66.068596 44.766766 66.737701 42.69976 c
h
50 45.149254 m
47.114929 45.149254 44.776119 47.488064 44.776119 50.373135 c
44.776119 53.258205 47.114929 55.597015 50 55.597015 c
52.885071 55.597015 55.223881 53.258205 55.223881 50.373135 c
55.223881 47.488064 52.885071 45.149254 50 45.149254 c
h
50 48.134327 m
51.236458 48.134327 52.238808 49.136677 52.238808 50.373135 c
52.238808 51.609592 51.236458 52.611938 50 52.611938 c
48.763542 52.611938 47.761192 51.609592 47.761192 50.373135 c
47.761192 49.136677 48.763542 48.134327 50 48.134327 c
h
W
0 0 251 100 rc
13.681785 82.958336 m
86.318214 82.958336 l
86.318214 17.079964 l
13.681785 17.079964 l
h
f
ep
end
%%Trailer
%%EOF
